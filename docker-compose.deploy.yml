services:
  prestart:
    build:
      context: ./backend
    image: ${DOCKER_IMAGE_BACKEND}
    env_file:
      - deploy.env
    command: bash scripts/prestart.sh
    networks:
      - web
    depends_on:
      - db
    
  backend:
    build:
      context: ./backend
    image: ${DOCKER_IMAGE_BACKEND}
    env_file: ./deploy.env
    networks:
      - web
    volumes:
      - ./exports:/app/exports
    labels:
      - traefik.enable=true
      - traefik.docker.network=web
      - traefik.constraint-label=web
      - traefik.http.services.${STACK_NAME}-backend.loadbalancer.server.port=8000
      - traefik.http.routers.${STACK_NAME}-backend-http.rule=Host(`api.${DOMAIN}`)
      - traefik.http.routers.${STACK_NAME}-backend-http.entrypoints=http
      - traefik.http.routers.${STACK_NAME}-backend-http.middlewares=https-redirect
      - traefik.http.routers.${STACK_NAME}-backend-https.rule=Host(`api.${DOMAIN}`)
      - traefik.http.routers.${STACK_NAME}-backend-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME}-backend-https.tls=true
      - traefik.http.routers.${STACK_NAME}-backend-https.tls.certresolver=http
    depends_on:
      - db

  frontend:
    build:
      context: ./frontend
    image: ${DOCKER_IMAGE_FRONTEND}
    env_file: ./deploy.env
    environment:
      - NODE_ENV=production
      - API_URL=https://api.${DOMAIN}
      - NEXT_PUBLIC_MEDIA_URL=https://api.${DOMAIN}
    networks:
      - web
    labels:
      - traefik.enable=true
      - traefik.docker.network=web
      - traefik.constraint-label=web
      - traefik.http.services.${STACK_NAME}-frontend.loadbalancer.server.port=3000
      - traefik.http.routers.${STACK_NAME}-frontend-http.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.${STACK_NAME}-frontend-http.entrypoints=http
      - traefik.http.routers.${STACK_NAME}-frontend-http.middlewares=https-redirect
      - traefik.http.routers.${STACK_NAME}-frontend-https.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.${STACK_NAME}-frontend-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME}-frontend-https.tls=true
      - traefik.http.routers.${STACK_NAME}-frontend-https.tls.certresolver=http
    depends_on:
      - backend

  db:
    image: postgres:15
    restart: unless-stopped
    env_file: ./deploy.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - web
    volumes:
      - pgdata:/var/lib/postgresql/data

  adminer:
    image: adminer
    env_file: ./deploy.env
    restart: unless-stopped
    environment:
      - ADMINER_DESIGN=pepa-linha-dark
    networks:
      - web
    labels:
      - traefik.enable=true
      - traefik.docker.network=web
      - traefik.constraint-label=web
      - traefik.http.routers.${STACK_NAME}-adminer-http.rule=Host(`adminer.${DOMAIN}`)
      - traefik.http.routers.${STACK_NAME}-adminer-http.entrypoints=http
      - traefik.http.routers.${STACK_NAME}-adminer-http.middlewares=https-redirect
      - traefik.http.routers.${STACK_NAME}-adminer-https.rule=Host(`adminer.${DOMAIN}`)
      - traefik.http.routers.${STACK_NAME}-adminer-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME}-adminer-https.tls=true
      - traefik.http.routers.${STACK_NAME}-adminer-https.tls.certresolver=http
      - traefik.http.services.${STACK_NAME}-adminer.loadbalancer.server.port=8080

volumes:
  pgdata:

networks:
  web:
    external: true
    # external: true
